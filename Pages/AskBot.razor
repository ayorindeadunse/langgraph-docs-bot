@page "/ask"
@using LangGraphDocsBot.Models
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS

<div class="container mt-4" style="max-width: 800px;">
    <h3 class="mb-4">Ask LangGraphDocsBot</h3>

    @if (!string.IsNullOrWhiteSpace(userQuestion) || isLoading || !string.IsNullOrWhiteSpace(answer))
    {
        <div class="chat-box border p-3 rounded bg-light mb-3">
            @if (!string.IsNullOrWhiteSpace(userQuestion))
            {
                <div class="d-flex justify-content-end mb-2">
                    <div class="p-2 bg-primary text-white rounded" style="max-width: 75%;">
                        @userQuestion
                    </div>
                </div>
            }

            @if (isLoading)
            {
                <div class="d-flex align-items-center mb-2">
                    <span class="spinner-border spinner-border-sm me-2 text-primary" role="status"></span>
                    <em>LangGraphDocsBot is typing...</em>
                </div>
            }

            @if (!string.IsNullOrWhiteSpace(answer))
            {
                <div class="d-flex justify-content-start mb-2">
                    <div class="p-2 bg-white border rounded shadow-sm" style="max-width: 75%;">
                        @((MarkupString)Markdig.Markdown.ToHtml(answer))
                    </div>
                </div>
            }
        </div>
    }

    <div class="input-group">
        <input class="form-control" @bind="question" @bind:event="oninput" placeholder="Ask a question..." />
        <button class="btn btn-primary" @onclick="SubmitQuestion" disabled="@string.IsNullOrWhiteSpace(question)">Ask</button>
    </div>
</div>

@code {
    private string question = "";
    private string userQuestion = "";
    private string answer = "";
    private bool isLoading = false;
    private string? sessionId;

    protected override async Task OnInitializedAsync()
    {
        sessionId = await GetOrCreateSessionId();
    }

    private async Task<string> GetOrCreateSessionId()
    {
        var existing = await JS.InvokeAsync<string>("localStorage.getItem","chatSessionId");
        if (!string.IsNullOrWhiteSpace(existing)) return existing;

        var newSessionId = Guid.NewGuid().ToString();
        await JS.InvokeVoidAsync("localStorage.setItem", "chatSessionId", newSessionId);
        return newSessionId;
    }
    private async Task SubmitQuestion()
    {
        if (string.IsNullOrWhiteSpace(question)) return;

        var thisQuestion = question;
        userQuestion = thisQuestion;
        question = string.Empty;
        answer = string.Empty;
        isLoading = true;

        try
        {
            var request = new QuestionRequest { Question = thisQuestion };
            var client = HttpClientFactory.CreateClient("LangGraphDocsBotAPI");

            // Send  session_id as query string
            var url = $"/ask?session_id={sessionId}";
            var result = await client.PostAsJsonAsync(url, request);

            if (result.IsSuccessStatusCode)
            {
                var response = await result.Content.ReadFromJsonAsync<QaResponse>();
                answer = response?.Response ?? "No response received.";
            }
            else
            {
                answer = $"Error: {result.StatusCode}";
                Console.WriteLine("Error: " + result.StatusCode);
            }
        }
        catch (Exception ex)
        {
            answer = $"Exception: {ex.Message}";
            Console.WriteLine("Exception: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }
}
